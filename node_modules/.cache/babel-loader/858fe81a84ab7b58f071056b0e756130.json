{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n/*!\n * escape-html\n * Copyright(c) 2012-2013 TJ Holowaychuk\n * Copyright(c) 2015 Andreas Lubbe\n * Copyright(c) 2015 Tiancheng \"Timothy\" Gu\n * MIT Licensed\n */\n\n/**\n * Module variables.\n * @private\n */\n\n\nvar matchHtmlRegExp = /[\"'&<>]/;\n/**\n * Module exports.\n * @public\n */\n\nvar escapeHtml_1 = escapeHtml;\n/**\n * Escape special characters in the given string of html.\n *\n * @param  {string} string The string to escape for inserting into HTML\n * @return {string}\n * @public\n */\n\nfunction escapeHtml(string) {\n  var str = '' + string;\n  var match = matchHtmlRegExp.exec(str);\n\n  if (!match) {\n    return str;\n  }\n\n  var escape;\n  var html = '';\n  var index = 0;\n  var lastIndex = 0;\n\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        // \"\n        escape = '&quot;';\n        break;\n\n      case 38:\n        // &\n        escape = '&amp;';\n        break;\n\n      case 39:\n        // '\n        escape = '&#39;';\n        break;\n\n      case 60:\n        // <\n        escape = '&lt;';\n        break;\n\n      case 62:\n        // >\n        escape = '&gt;';\n        break;\n\n      default:\n        continue;\n    }\n\n    if (lastIndex !== index) {\n      html += str.substring(lastIndex, index);\n    }\n\n    lastIndex = index + 1;\n    html += escape;\n  }\n\n  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction unwrapExports(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar blocks = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.BLOCKS = void 0;\n  /**\n   * Map of all Contentful block types. Blocks contain inline or block nodes.\n   */\n\n  var BLOCKS;\n\n  (function (BLOCKS) {\n    BLOCKS[\"DOCUMENT\"] = \"document\";\n    BLOCKS[\"PARAGRAPH\"] = \"paragraph\";\n    BLOCKS[\"HEADING_1\"] = \"heading-1\";\n    BLOCKS[\"HEADING_2\"] = \"heading-2\";\n    BLOCKS[\"HEADING_3\"] = \"heading-3\";\n    BLOCKS[\"HEADING_4\"] = \"heading-4\";\n    BLOCKS[\"HEADING_5\"] = \"heading-5\";\n    BLOCKS[\"HEADING_6\"] = \"heading-6\";\n    BLOCKS[\"OL_LIST\"] = \"ordered-list\";\n    BLOCKS[\"UL_LIST\"] = \"unordered-list\";\n    BLOCKS[\"LIST_ITEM\"] = \"list-item\";\n    BLOCKS[\"HR\"] = \"hr\";\n    BLOCKS[\"QUOTE\"] = \"blockquote\";\n    BLOCKS[\"EMBEDDED_ENTRY\"] = \"embedded-entry-block\";\n    BLOCKS[\"EMBEDDED_ASSET\"] = \"embedded-asset-block\";\n    BLOCKS[\"EMBEDDED_RESOURCE\"] = \"embedded-resource-block\";\n    BLOCKS[\"TABLE\"] = \"table\";\n    BLOCKS[\"TABLE_ROW\"] = \"table-row\";\n    BLOCKS[\"TABLE_CELL\"] = \"table-cell\";\n    BLOCKS[\"TABLE_HEADER_CELL\"] = \"table-header-cell\";\n  })(BLOCKS = exports.BLOCKS || (exports.BLOCKS = {}));\n});\nunwrapExports(blocks);\nvar blocks_1 = blocks.BLOCKS;\nvar inlines = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.INLINES = void 0;\n  /**\n   * Map of all Contentful inline types. Inline contain inline or text nodes.\n   */\n\n  var INLINES;\n\n  (function (INLINES) {\n    INLINES[\"HYPERLINK\"] = \"hyperlink\";\n    INLINES[\"ENTRY_HYPERLINK\"] = \"entry-hyperlink\";\n    INLINES[\"ASSET_HYPERLINK\"] = \"asset-hyperlink\";\n    INLINES[\"RESOURCE_HYPERLINK\"] = \"resource-hyperlink\";\n    INLINES[\"EMBEDDED_ENTRY\"] = \"embedded-entry-inline\";\n    INLINES[\"EMBEDDED_RESOURCE\"] = \"embedded-resource-inline\";\n  })(INLINES = exports.INLINES || (exports.INLINES = {}));\n});\nunwrapExports(inlines);\nvar inlines_1 = inlines.INLINES;\nvar marks = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  /**\n   * Map of all Contentful marks.\n   */\n\n  var MARKS;\n\n  (function (MARKS) {\n    MARKS[\"BOLD\"] = \"bold\";\n    MARKS[\"ITALIC\"] = \"italic\";\n    MARKS[\"UNDERLINE\"] = \"underline\";\n    MARKS[\"CODE\"] = \"code\";\n    MARKS[\"SUPERSCRIPT\"] = \"superscript\";\n    MARKS[\"SUBSCRIPT\"] = \"subscript\";\n  })(MARKS || (MARKS = {}));\n\n  exports.default = MARKS;\n});\nunwrapExports(marks);\nvar schemaConstraints = createCommonjsModule(function (module, exports) {\n  var __spreadArray = commonjsGlobal && commonjsGlobal.__spreadArray || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n        if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n        ar[i] = from[i];\n      }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n  };\n\n  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n\n  var _a;\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.V1_MARKS = exports.V1_NODE_TYPES = exports.TEXT_CONTAINERS = exports.HEADINGS = exports.CONTAINERS = exports.VOID_BLOCKS = exports.TABLE_BLOCKS = exports.LIST_ITEM_BLOCKS = exports.TOP_LEVEL_BLOCKS = void 0;\n\n  var marks_1 = __importDefault(marks);\n  /**\n   * Array of all top level block types.\n   * Only these block types can be the direct children of the document.\n   */\n\n\n  exports.TOP_LEVEL_BLOCKS = [blocks.BLOCKS.PARAGRAPH, blocks.BLOCKS.HEADING_1, blocks.BLOCKS.HEADING_2, blocks.BLOCKS.HEADING_3, blocks.BLOCKS.HEADING_4, blocks.BLOCKS.HEADING_5, blocks.BLOCKS.HEADING_6, blocks.BLOCKS.OL_LIST, blocks.BLOCKS.UL_LIST, blocks.BLOCKS.HR, blocks.BLOCKS.QUOTE, blocks.BLOCKS.EMBEDDED_ENTRY, blocks.BLOCKS.EMBEDDED_ASSET, blocks.BLOCKS.EMBEDDED_RESOURCE, blocks.BLOCKS.TABLE];\n  /**\n   * Array of all allowed block types inside list items\n   */\n\n  exports.LIST_ITEM_BLOCKS = [blocks.BLOCKS.PARAGRAPH, blocks.BLOCKS.HEADING_1, blocks.BLOCKS.HEADING_2, blocks.BLOCKS.HEADING_3, blocks.BLOCKS.HEADING_4, blocks.BLOCKS.HEADING_5, blocks.BLOCKS.HEADING_6, blocks.BLOCKS.OL_LIST, blocks.BLOCKS.UL_LIST, blocks.BLOCKS.HR, blocks.BLOCKS.QUOTE, blocks.BLOCKS.EMBEDDED_ENTRY, blocks.BLOCKS.EMBEDDED_ASSET, blocks.BLOCKS.EMBEDDED_RESOURCE];\n  exports.TABLE_BLOCKS = [blocks.BLOCKS.TABLE, blocks.BLOCKS.TABLE_ROW, blocks.BLOCKS.TABLE_CELL, blocks.BLOCKS.TABLE_HEADER_CELL];\n  /**\n   * Array of all void block types\n   */\n\n  exports.VOID_BLOCKS = [blocks.BLOCKS.HR, blocks.BLOCKS.EMBEDDED_ENTRY, blocks.BLOCKS.EMBEDDED_ASSET, blocks.BLOCKS.EMBEDDED_RESOURCE];\n  /**\n   * Dictionary of all container block types, and the set block types they accept as children.\n   *\n   * Note: This does not include `[BLOCKS.DOCUMENT]: TOP_LEVEL_BLOCKS`\n   */\n\n  exports.CONTAINERS = (_a = {}, _a[blocks.BLOCKS.OL_LIST] = [blocks.BLOCKS.LIST_ITEM], _a[blocks.BLOCKS.UL_LIST] = [blocks.BLOCKS.LIST_ITEM], _a[blocks.BLOCKS.LIST_ITEM] = exports.LIST_ITEM_BLOCKS, _a[blocks.BLOCKS.QUOTE] = [blocks.BLOCKS.PARAGRAPH], _a[blocks.BLOCKS.TABLE] = [blocks.BLOCKS.TABLE_ROW], _a[blocks.BLOCKS.TABLE_ROW] = [blocks.BLOCKS.TABLE_CELL, blocks.BLOCKS.TABLE_HEADER_CELL], _a[blocks.BLOCKS.TABLE_CELL] = [blocks.BLOCKS.PARAGRAPH], _a[blocks.BLOCKS.TABLE_HEADER_CELL] = [blocks.BLOCKS.PARAGRAPH], _a);\n  /**\n   * Array of all heading levels\n   */\n\n  exports.HEADINGS = [blocks.BLOCKS.HEADING_1, blocks.BLOCKS.HEADING_2, blocks.BLOCKS.HEADING_3, blocks.BLOCKS.HEADING_4, blocks.BLOCKS.HEADING_5, blocks.BLOCKS.HEADING_6];\n  /**\n   * Array of all block types that may contain text and inline nodes.\n   */\n\n  exports.TEXT_CONTAINERS = __spreadArray([blocks.BLOCKS.PARAGRAPH], exports.HEADINGS, true);\n  /**\n   * Node types before `tables` release.\n   */\n\n  exports.V1_NODE_TYPES = [blocks.BLOCKS.DOCUMENT, blocks.BLOCKS.PARAGRAPH, blocks.BLOCKS.HEADING_1, blocks.BLOCKS.HEADING_2, blocks.BLOCKS.HEADING_3, blocks.BLOCKS.HEADING_4, blocks.BLOCKS.HEADING_5, blocks.BLOCKS.HEADING_6, blocks.BLOCKS.OL_LIST, blocks.BLOCKS.UL_LIST, blocks.BLOCKS.LIST_ITEM, blocks.BLOCKS.HR, blocks.BLOCKS.QUOTE, blocks.BLOCKS.EMBEDDED_ENTRY, blocks.BLOCKS.EMBEDDED_ASSET, inlines.INLINES.HYPERLINK, inlines.INLINES.ENTRY_HYPERLINK, inlines.INLINES.ASSET_HYPERLINK, inlines.INLINES.EMBEDDED_ENTRY, 'text'];\n  /**\n   * Marks before `superscript` & `subscript` release.\n   */\n\n  exports.V1_MARKS = [marks_1.default.BOLD, marks_1.default.CODE, marks_1.default.ITALIC, marks_1.default.UNDERLINE];\n});\nunwrapExports(schemaConstraints);\nvar schemaConstraints_1 = schemaConstraints.V1_MARKS;\nvar schemaConstraints_2 = schemaConstraints.V1_NODE_TYPES;\nvar schemaConstraints_3 = schemaConstraints.TEXT_CONTAINERS;\nvar schemaConstraints_4 = schemaConstraints.HEADINGS;\nvar schemaConstraints_5 = schemaConstraints.CONTAINERS;\nvar schemaConstraints_6 = schemaConstraints.VOID_BLOCKS;\nvar schemaConstraints_7 = schemaConstraints.TABLE_BLOCKS;\nvar schemaConstraints_8 = schemaConstraints.LIST_ITEM_BLOCKS;\nvar schemaConstraints_9 = schemaConstraints.TOP_LEVEL_BLOCKS;\nvar types = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n});\nunwrapExports(types);\nvar nodeTypes = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n});\nunwrapExports(nodeTypes);\nvar emptyDocument = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  /**\n   * A rich text document considered to be empty.\n   * Any other document structure than this is not considered empty.\n   */\n\n  var EMPTY_DOCUMENT = {\n    nodeType: blocks.BLOCKS.DOCUMENT,\n    data: {},\n    content: [{\n      nodeType: blocks.BLOCKS.PARAGRAPH,\n      data: {},\n      content: [{\n        nodeType: 'text',\n        value: '',\n        marks: [],\n        data: {}\n      }]\n    }]\n  };\n  exports.default = EMPTY_DOCUMENT;\n});\nunwrapExports(emptyDocument);\nvar helpers = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.isText = exports.isBlock = exports.isInline = void 0;\n  /**\n   * Tiny replacement for Object.values(object).includes(key) to\n   * avoid including CoreJS polyfills\n   */\n\n  function hasValue(obj, value) {\n    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {\n      var key = _a[_i];\n\n      if (value === obj[key]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Checks if the node is an instance of Inline.\n   */\n\n\n  function isInline(node) {\n    return hasValue(inlines.INLINES, node.nodeType);\n  }\n\n  exports.isInline = isInline;\n  /**\n   * Checks if the node is an instance of Block.\n   */\n\n  function isBlock(node) {\n    return hasValue(blocks.BLOCKS, node.nodeType);\n  }\n\n  exports.isBlock = isBlock;\n  /**\n   * Checks if the node is an instance of Text.\n   */\n\n  function isText(node) {\n    return node.nodeType === 'text';\n  }\n\n  exports.isText = isText;\n});\nunwrapExports(helpers);\nvar helpers_1 = helpers.isText;\nvar helpers_2 = helpers.isBlock;\nvar helpers_3 = helpers.isInline;\nvar dist = createCommonjsModule(function (module, exports) {\n  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n\n  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n\n  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n  };\n\n  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n    __setModuleDefault(result, mod);\n\n    return result;\n  };\n\n  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.helpers = exports.EMPTY_DOCUMENT = exports.MARKS = exports.INLINES = exports.BLOCKS = void 0;\n  Object.defineProperty(exports, \"BLOCKS\", {\n    enumerable: true,\n    get: function () {\n      return blocks.BLOCKS;\n    }\n  });\n  Object.defineProperty(exports, \"INLINES\", {\n    enumerable: true,\n    get: function () {\n      return inlines.INLINES;\n    }\n  });\n  Object.defineProperty(exports, \"MARKS\", {\n    enumerable: true,\n    get: function () {\n      return __importDefault(marks).default;\n    }\n  });\n\n  __exportStar(schemaConstraints, exports);\n\n  __exportStar(types, exports);\n\n  __exportStar(nodeTypes, exports);\n\n  Object.defineProperty(exports, \"EMPTY_DOCUMENT\", {\n    enumerable: true,\n    get: function () {\n      return __importDefault(emptyDocument).default;\n    }\n  });\n\n  var helpers$1 = __importStar(helpers);\n\n  exports.helpers = helpers$1;\n});\nunwrapExports(dist);\nvar dist_1 = dist.helpers;\nvar dist_2 = dist.EMPTY_DOCUMENT;\nvar dist_3 = dist.MARKS;\nvar dist_4 = dist.INLINES;\nvar dist_5 = dist.BLOCKS;\n\nvar _a, _b;\n\nvar attributeValue = function (value) {\n  return \"\\\"\".concat(value.replace(/\"/g, '&quot;'), \"\\\"\");\n};\n\nvar defaultNodeRenderers = (_a = {}, _a[dist_5.PARAGRAPH] = function (node, next) {\n  return \"<p>\".concat(next(node.content), \"</p>\");\n}, _a[dist_5.HEADING_1] = function (node, next) {\n  return \"<h1>\".concat(next(node.content), \"</h1>\");\n}, _a[dist_5.HEADING_2] = function (node, next) {\n  return \"<h2>\".concat(next(node.content), \"</h2>\");\n}, _a[dist_5.HEADING_3] = function (node, next) {\n  return \"<h3>\".concat(next(node.content), \"</h3>\");\n}, _a[dist_5.HEADING_4] = function (node, next) {\n  return \"<h4>\".concat(next(node.content), \"</h4>\");\n}, _a[dist_5.HEADING_5] = function (node, next) {\n  return \"<h5>\".concat(next(node.content), \"</h5>\");\n}, _a[dist_5.HEADING_6] = function (node, next) {\n  return \"<h6>\".concat(next(node.content), \"</h6>\");\n}, _a[dist_5.EMBEDDED_ENTRY] = function (node, next) {\n  return \"<div>\".concat(next(node.content), \"</div>\");\n}, _a[dist_5.EMBEDDED_RESOURCE] = function (node, next) {\n  return \"<div>\".concat(next(node.content), \"</div>\");\n}, _a[dist_5.UL_LIST] = function (node, next) {\n  return \"<ul>\".concat(next(node.content), \"</ul>\");\n}, _a[dist_5.OL_LIST] = function (node, next) {\n  return \"<ol>\".concat(next(node.content), \"</ol>\");\n}, _a[dist_5.LIST_ITEM] = function (node, next) {\n  return \"<li>\".concat(next(node.content), \"</li>\");\n}, _a[dist_5.QUOTE] = function (node, next) {\n  return \"<blockquote>\".concat(next(node.content), \"</blockquote>\");\n}, _a[dist_5.HR] = function () {\n  return '<hr/>';\n}, _a[dist_5.TABLE] = function (node, next) {\n  return \"<table>\".concat(next(node.content), \"</table>\");\n}, _a[dist_5.TABLE_ROW] = function (node, next) {\n  return \"<tr>\".concat(next(node.content), \"</tr>\");\n}, _a[dist_5.TABLE_HEADER_CELL] = function (node, next) {\n  return \"<th>\".concat(next(node.content), \"</th>\");\n}, _a[dist_5.TABLE_CELL] = function (node, next) {\n  return \"<td>\".concat(next(node.content), \"</td>\");\n}, _a[dist_4.ASSET_HYPERLINK] = function (node) {\n  return defaultInline(dist_4.ASSET_HYPERLINK, node);\n}, _a[dist_4.ENTRY_HYPERLINK] = function (node) {\n  return defaultInline(dist_4.ENTRY_HYPERLINK, node);\n}, _a[dist_4.EMBEDDED_ENTRY] = function (node) {\n  return defaultInline(dist_4.EMBEDDED_ENTRY, node);\n}, _a[dist_4.HYPERLINK] = function (node, next) {\n  var href = typeof node.data.uri === 'string' ? node.data.uri : '';\n  return \"<a href=\".concat(attributeValue(href), \">\").concat(next(node.content), \"</a>\");\n}, _a);\nvar defaultMarkRenderers = (_b = {}, _b[dist_3.BOLD] = function (text) {\n  return \"<b>\".concat(text, \"</b>\");\n}, _b[dist_3.ITALIC] = function (text) {\n  return \"<i>\".concat(text, \"</i>\");\n}, _b[dist_3.UNDERLINE] = function (text) {\n  return \"<u>\".concat(text, \"</u>\");\n}, _b[dist_3.CODE] = function (text) {\n  return \"<code>\".concat(text, \"</code>\");\n}, _b[dist_3.SUPERSCRIPT] = function (text) {\n  return \"<sup>\".concat(text, \"</sup>\");\n}, _b[dist_3.SUBSCRIPT] = function (text) {\n  return \"<sub>\".concat(text, \"</sub>\");\n}, _b);\n\nvar defaultInline = function (type, node) {\n  return \"<span>type: \".concat(escapeHtml_1(type), \" id: \").concat(escapeHtml_1(node.data.target.sys.id), \"</span>\");\n};\n/**\r\n * Serialize a Contentful Rich Text `document` to an html string.\r\n */\n\n\nfunction documentToHtmlString(richTextDocument, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!richTextDocument || !richTextDocument.content) {\n    return '';\n  }\n\n  return nodeListToHtmlString(richTextDocument.content, {\n    renderNode: __assign(__assign({}, defaultNodeRenderers), options.renderNode),\n    renderMark: __assign(__assign({}, defaultMarkRenderers), options.renderMark),\n    preserveWhitespace: options.preserveWhitespace\n  });\n}\n\nfunction nodeListToHtmlString(nodes, _a) {\n  var renderNode = _a.renderNode,\n      renderMark = _a.renderMark,\n      preserveWhitespace = _a.preserveWhitespace;\n  return nodes.map(function (node) {\n    return nodeToHtmlString(node, {\n      renderNode: renderNode,\n      renderMark: renderMark,\n      preserveWhitespace: preserveWhitespace\n    });\n  }).join('');\n}\n\nfunction nodeToHtmlString(node, _a) {\n  var renderNode = _a.renderNode,\n      renderMark = _a.renderMark,\n      preserveWhitespace = _a.preserveWhitespace;\n\n  if (dist_1.isText(node)) {\n    var nodeValue = escapeHtml_1(node.value); // If preserveWhitespace is true, handle line breaks and spaces.\n\n    if (preserveWhitespace) {\n      nodeValue = nodeValue.replace(/\\n/g, '<br/>').replace(/ {2,}/g, function (match) {\n        return '&nbsp;'.repeat(match.length);\n      });\n    }\n\n    if (node.marks.length > 0) {\n      return node.marks.reduce(function (value, mark) {\n        if (!renderMark[mark.type]) {\n          return value;\n        }\n\n        return renderMark[mark.type](value);\n      }, nodeValue);\n    }\n\n    return nodeValue;\n  } else {\n    var nextNode = function (nodes) {\n      return nodeListToHtmlString(nodes, {\n        renderMark: renderMark,\n        renderNode: renderNode,\n        preserveWhitespace: preserveWhitespace\n      });\n    };\n\n    if (!node.nodeType || !renderNode[node.nodeType]) {\n      // TODO: Figure what to return when passed an unrecognized node.\n      return '';\n    }\n\n    return renderNode[node.nodeType](node, nextNode);\n  }\n}\n\nexports.documentToHtmlString = documentToHtmlString;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;;AAEA,IAAIA,eAAe,GAAG,SAAtB;AAEA;AACA;AACA;AACA;;AAEA,gBAAc,GAAGC,UAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,UAAT,CAAoBC,MAApB,EAA4B;EAC1B,IAAIC,GAAG,GAAG,KAAKD,MAAf;EACA,IAAIE,KAAK,GAAGJ,eAAe,CAACK,IAAhB,CAAqBF,GAArB,CAAZ;;EAEA,IAAI,CAACC,KAAL,EAAY;IACV,OAAOD,GAAP;EACD;;EAED,IAAIG,MAAJ;EACA,IAAIC,IAAI,GAAG,EAAX;EACA,IAAIC,KAAK,GAAG,CAAZ;EACA,IAAIC,SAAS,GAAG,CAAhB;;EAEA,KAAKD,KAAK,GAAGJ,KAAK,CAACI,KAAnB,EAA0BA,KAAK,GAAGL,GAAG,CAACO,MAAtC,EAA8CF,KAAK,EAAnD,EAAuD;IACrD,QAAQL,GAAG,CAACQ,UAAJ,CAAeH,KAAf,CAAR;MACE,KAAK,EAAL;QAAO;QACLF,MAAM,GAAG,QAAT;QACA;;MACF,KAAK,EAAL;QAAO;QACLA,MAAM,GAAG,OAAT;QACA;;MACF,KAAK,EAAL;QAAO;QACLA,MAAM,GAAG,OAAT;QACA;;MACF,KAAK,EAAL;QAAO;QACLA,MAAM,GAAG,MAAT;QACA;;MACF,KAAK,EAAL;QAAO;QACLA,MAAM,GAAG,MAAT;QACA;;MACF;QACE;IAjBJ;;IAoBA,IAAIG,SAAS,KAAKD,KAAlB,EAAyB;MACvBD,IAAI,IAAIJ,GAAG,CAACS,SAAJ,CAAcH,SAAd,EAAyBD,KAAzB,CAAR;IACD;;IAEDC,SAAS,GAAGD,KAAK,GAAG,CAApB;IACAD,IAAI,IAAID,MAAR;EACD;;EAED,OAAOG,SAAS,KAAKD,KAAd,GACHD,IAAI,GAAGJ,GAAG,CAACS,SAAJ,CAAcH,SAAd,EAAyBD,KAAzB,CADJ,GAEHD,IAFJ;AAGF;;;;;;;;;;;;;;;;;;;EC7EA;;;;EAGA,IAAYM,MAAZ;;EAAA,WAAYA,MAAZ,EAAkB;IAChBA;IACAA;IAEAA;IACAA;IACAA;IACAA;IACAA;IACAA;IAEAA;IACAA;IACAA;IAEAA;IACAA;IAEAA;IACAA;IACAA;IAEAA;IACAA;IACAA;IACAA;EACD,CA1BD,EAAYA,MAAM,GAANC,oCAAM,EAAN,CAAZ;;;;;;;;;ECHA;;;;EAGA,IAAYC,OAAZ;;EAAA,WAAYA,OAAZ,EAAmB;IACjBA;IACAA;IACAA;IACAA;IACAA;IACAA;EACD,CAPD,EAAYA,OAAO,GAAPD,sCAAO,EAAP,CAAZ;;;;;;;;ECHA;;;;EAGA,IAAKE,KAAL;;EAAA,WAAKA,KAAL,EAAU;IACRA;IACAA;IACAA;IACAA;IACAA;IACAA;EACD,CAPD,EAAKA,KAAK,KAALA,KAAK,MAAV;;EASAF,kBAAeE,KAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;ECVA;EAmBA;;;;;;EAIaF,2BAAwC,CACnDG,cAAOC,SAD4C,EAEnDD,cAAOE,SAF4C,EAGnDF,cAAOG,SAH4C,EAInDH,cAAOI,SAJ4C,EAKnDJ,cAAOK,SAL4C,EAMnDL,cAAOM,SAN4C,EAOnDN,cAAOO,SAP4C,EAQnDP,cAAOQ,OAR4C,EASnDR,cAAOS,OAT4C,EAUnDT,cAAOU,EAV4C,EAWnDV,cAAOW,KAX4C,EAYnDX,cAAOY,cAZ4C,EAanDZ,cAAOa,cAb4C,EAcnDb,cAAOc,iBAd4C,EAenDd,cAAOe,KAf4C,CAAxC;EAkCb;;;;EAGalB,2BAAwC,CACnDG,cAAOC,SAD4C,EAEnDD,cAAOE,SAF4C,EAGnDF,cAAOG,SAH4C,EAInDH,cAAOI,SAJ4C,EAKnDJ,cAAOK,SAL4C,EAMnDL,cAAOM,SAN4C,EAOnDN,cAAOO,SAP4C,EAQnDP,cAAOQ,OAR4C,EASnDR,cAAOS,OAT4C,EAUnDT,cAAOU,EAV4C,EAWnDV,cAAOW,KAX4C,EAYnDX,cAAOY,cAZ4C,EAanDZ,cAAOa,cAb4C,EAcnDb,cAAOc,iBAd4C,CAAxC;EAiBAjB,uBAAe,CAC1BG,cAAOe,KADmB,EAE1Bf,cAAOgB,SAFmB,EAG1BhB,cAAOiB,UAHmB,EAI1BjB,cAAOkB,iBAJmB,CAAf;EAOb;;;;EAGarB,sBAAc,CACzBG,cAAOU,EADkB,EAEzBV,cAAOY,cAFkB,EAGzBZ,cAAOa,cAHkB,EAIzBb,cAAOc,iBAJkB,CAAd;EAOb;;;;;;EAKajB,sBAAUsB,SACrBA,GAACnB,cAAOQ,OAAR,IAAkB,CAACR,cAAOoB,SAAR,CADG,EAErBD,GAACnB,cAAOS,OAAR,IAAkB,CAACT,cAAOoB,SAAR,CAFG,EAGrBD,GAACnB,cAAOoB,SAAR,IAAoBvB,wBAHC,EAIrBsB,GAACnB,cAAOW,KAAR,IAAgB,CAACX,cAAOC,SAAR,CAJK,EAKrBkB,GAACnB,cAAOe,KAAR,IAAgB,CAACf,cAAOgB,SAAR,CALK,EAMrBG,GAACnB,cAAOgB,SAAR,IAAoB,CAAChB,cAAOiB,UAAR,EAAoBjB,cAAOkB,iBAA3B,CANC,EAOrBC,GAACnB,cAAOiB,UAAR,IAAqB,CAACjB,cAAOC,SAAR,CAPA,EAQrBkB,GAACnB,cAAOkB,iBAAR,IAA4B,CAAClB,cAAOC,SAAR,CARP,IAAV;EAWb;;;;EAGaJ,mBAAW,CACtBG,cAAOE,SADe,EAEtBF,cAAOG,SAFe,EAGtBH,cAAOI,SAHe,EAItBJ,cAAOK,SAJe,EAKtBL,cAAOM,SALe,EAMtBN,cAAOO,SANe,CAAX;EASb;;;;EAGaV,0BAAewB,eAAIrB,cAAOC,SAAX,GAAyBJ,gBAAzB,EAAiC,IAAjC,CAAf;EAEb;;;;EAGaA,wBAAgB,CAC3BG,cAAOsB,QADoB,EAE3BtB,cAAOC,SAFoB,EAG3BD,cAAOE,SAHoB,EAI3BF,cAAOG,SAJoB,EAK3BH,cAAOI,SALoB,EAM3BJ,cAAOK,SANoB,EAO3BL,cAAOM,SAPoB,EAQ3BN,cAAOO,SARoB,EAS3BP,cAAOQ,OAToB,EAU3BR,cAAOS,OAVoB,EAW3BT,cAAOoB,SAXoB,EAY3BpB,cAAOU,EAZoB,EAa3BV,cAAOW,KAboB,EAc3BX,cAAOY,cAdoB,EAe3BZ,cAAOa,cAfoB,EAgB3BU,gBAAQC,SAhBmB,EAiB3BD,gBAAQE,eAjBmB,EAkB3BF,gBAAQG,eAlBmB,EAmB3BH,gBAAQX,cAnBmB,EAoB3B,MApB2B,CAAhB;EAuBb;;;;EAGaf,mBAAW,CAAC8B,gBAAMC,IAAP,EAAaD,gBAAME,IAAnB,EAAyBF,gBAAMG,MAA/B,EAAuCH,gBAAMI,SAA7C,CAAX;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC3Jb;;;;;EAIA,IAAMC,cAAc,GAAa;IAC/BC,QAAQ,EAAEjC,cAAOsB,QADc;IAE/BY,IAAI,EAAE,EAFyB;IAG/BC,OAAO,EAAE,CACP;MACEF,QAAQ,EAAEjC,cAAOC,SADnB;MAEEiC,IAAI,EAAE,EAFR;MAGEC,OAAO,EAAE,CACP;QACEF,QAAQ,EAAE,MADZ;QAEEG,KAAK,EAAE,EAFT;QAGEC,KAAK,EAAE,EAHT;QAIEH,IAAI,EAAE;MAJR,CADO;IAHX,CADO;EAHsB,CAAjC;EAmBArC,kBAAemC,cAAf;;;;;;;;ECtBA;;;;;EAIA,SAASM,QAAT,CAAkBC,GAAlB,EAAgDH,KAAhD,EAA8D;IAC5D,KAAkB,uBAAM,CAACI,IAAP,CAAYD,GAAZ,CAAlB,EAAkBE,cAAlB,EAAkBA,IAAlB,EAAoC;MAA/B,IAAMC,GAAG,SAAT;;MACH,IAAIN,KAAK,KAAKG,GAAG,CAACG,GAAD,CAAjB,EAAwB;QACtB,OAAO,IAAP;MACD;IACF;;IAED,OAAO,KAAP;EACD;EAED;;;;;EAGA,SAAgBC,QAAhB,CAAyBC,IAAzB,EAAmC;IACjC,OAAON,QAAQ,CAACf,eAAD,EAAUqB,IAAI,CAACX,QAAf,CAAf;EACD;;EAFDpC;EAIA;;;;EAGA,SAAgBgD,OAAhB,CAAwBD,IAAxB,EAAkC;IAChC,OAAON,QAAQ,CAACtC,aAAD,EAAS4C,IAAI,CAACX,QAAd,CAAf;EACD;;EAFDpC;EAIA;;;;EAGA,SAAgBiD,MAAhB,CAAuBF,IAAvB,EAAiC;IAC/B,OAAOA,IAAI,CAACX,QAAL,KAAkB,MAAzB;EACD;;EAFDpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECnCSkD;IAAAC;IAAAC;MAAA;IAAM;EAAN;EACAF;IAAAC;IAAAC;MAAA;IAAO;EAAP;EACAF;IAAAC;IAAAC;MAAA;IAAO;EAAP;;EAETC;;EAEAA;;EACAA;;EAESH;IAAAC;IAAAC;MAAA;IAAO;EAAP;;EAET;;EACSpD;;;;;;;;;;;ACCT,IAAMsD,cAAc,GAAG,UAACf,KAAD,EAAc;EAAK,mBAAIA,KAAK,CAACgB,OAAN,CAAc,IAAd,EAAoB,QAApB,CAAJ,EAAiC,IAAjC;AAAoC,CAA9E;;AAEA,IAAMC,oBAAoB,aACxBlC,GAACvB,MAAM,CAACK,SAAR,IAAoB,UAAC2C,IAAD,EAAOU,IAAP,EAAW;EAAK,oBAAMA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAV,EAAwB,MAAxB;AAA8B,CAD1C,EAExBhB,GAACvB,MAAM,CAACM,SAAR,IAAoB,UAAC0C,IAAD,EAAOU,IAAP,EAAW;EAAK,qBAAOA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAX,EAAyB,OAAzB;AAAgC,CAF5C,EAGxBhB,GAACvB,MAAM,CAACO,SAAR,IAAoB,UAACyC,IAAD,EAAOU,IAAP,EAAW;EAAK,qBAAOA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAX,EAAyB,OAAzB;AAAgC,CAH5C,EAIxBhB,GAACvB,MAAM,CAACQ,SAAR,IAAoB,UAACwC,IAAD,EAAOU,IAAP,EAAW;EAAK,qBAAOA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAX,EAAyB,OAAzB;AAAgC,CAJ5C,EAKxBhB,GAACvB,MAAM,CAACS,SAAR,IAAoB,UAACuC,IAAD,EAAOU,IAAP,EAAW;EAAK,qBAAOA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAX,EAAyB,OAAzB;AAAgC,CAL5C,EAMxBhB,GAACvB,MAAM,CAACU,SAAR,IAAoB,UAACsC,IAAD,EAAOU,IAAP,EAAW;EAAK,qBAAOA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAX,EAAyB,OAAzB;AAAgC,CAN5C,EAOxBhB,GAACvB,MAAM,CAACW,SAAR,IAAoB,UAACqC,IAAD,EAAOU,IAAP,EAAW;EAAK,qBAAOA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAX,EAAyB,OAAzB;AAAgC,CAP5C,EAQxBhB,GAACvB,MAAM,CAACgB,cAAR,IAAyB,UAACgC,IAAD,EAAOU,IAAP,EAAW;EAAK,sBAAQA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAZ,EAA0B,QAA1B;AAAkC,CARnD,EASxBhB,GAACvB,MAAM,CAACkB,iBAAR,IAA4B,UAAC8B,IAAD,EAAOU,IAAP,EAAW;EAAK,sBAAQA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAZ,EAA0B,QAA1B;AAAkC,CATtD,EAUxBhB,GAACvB,MAAM,CAACa,OAAR,IAAkB,UAACmC,IAAD,EAAOU,IAAP,EAAW;EAAK,qBAAOA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAX,EAAyB,OAAzB;AAAgC,CAV1C,EAWxBhB,GAACvB,MAAM,CAACY,OAAR,IAAkB,UAACoC,IAAD,EAAOU,IAAP,EAAW;EAAK,qBAAOA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAX,EAAyB,OAAzB;AAAgC,CAX1C,EAYxBhB,GAACvB,MAAM,CAACwB,SAAR,IAAoB,UAACwB,IAAD,EAAOU,IAAP,EAAW;EAAK,qBAAOA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAX,EAAyB,OAAzB;AAAgC,CAZ5C,EAaxBhB,GAACvB,MAAM,CAACe,KAAR,IAAgB,UAACiC,IAAD,EAAOU,IAAP,EAAW;EAAK,6BAAeA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAnB,EAAiC,eAAjC;AAAgD,CAbxD,EAcxBhB,GAACvB,MAAM,CAACc,EAAR,IAAa;EAAM;AAAO,CAdF,EAexBS,GAACvB,MAAM,CAACmB,KAAR,IAAgB,UAAC6B,IAAD,EAAOU,IAAP,EAAW;EAAK,wBAAUA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAd,EAA4B,UAA5B;AAAsC,CAf9C,EAgBxBhB,GAACvB,MAAM,CAACoB,SAAR,IAAoB,UAAC4B,IAAD,EAAOU,IAAP,EAAW;EAAK,qBAAOA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAX,EAAyB,OAAzB;AAAgC,CAhB5C,EAiBxBhB,GAACvB,MAAM,CAACsB,iBAAR,IAA4B,UAAC0B,IAAD,EAAOU,IAAP,EAAW;EAAK,qBAAOA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAX,EAAyB,OAAzB;AAAgC,CAjBpD,EAkBxBhB,GAACvB,MAAM,CAACqB,UAAR,IAAqB,UAAC2B,IAAD,EAAOU,IAAP,EAAW;EAAK,qBAAOA,IAAI,CAACV,IAAI,CAACT,OAAN,CAAX,EAAyB,OAAzB;AAAgC,CAlB7C,EAmBxBhB,GAACrB,MAAO,CAAC4B,eAAT,IAA2B,UAACkB,IAAD,EAAK;EAAK,oBAAa,CAAC9C,MAAO,CAAC4B,eAAT,EAA0BkB,IAA1B,CAAb;AAAsD,CAnBnE,EAoBxBzB,GAACrB,MAAO,CAAC2B,eAAT,IAA2B,UAACmB,IAAD,EAAK;EAAK,oBAAa,CAAC9C,MAAO,CAAC2B,eAAT,EAA0BmB,IAA1B,CAAb;AAAsD,CApBnE,EAqBxBzB,GAACrB,MAAO,CAACc,cAAT,IAA0B,UAACgC,IAAD,EAAK;EAAK,oBAAa,CAAC9C,MAAO,CAACc,cAAT,EAAyBgC,IAAzB,CAAb;AAAqD,CArBjE,EAsBxBzB,GAACrB,MAAO,CAAC0B,SAAT,IAAqB,UAACoB,IAAD,EAAOU,IAAP,EAAW;EAC9B,IAAMC,IAAI,GAAG,OAAOX,IAAI,CAACV,IAAL,CAAUsB,GAAjB,KAAyB,QAAzB,GAAoCZ,IAAI,CAACV,IAAL,CAAUsB,GAA9C,GAAoD,EAAjE;EACA,OAAO,kBAAWL,cAAc,CAACI,IAAD,CAAzB,EAA+B,GAA/B,EAA+BE,MAA/B,CAAmCH,IAAI,CAACV,IAAI,CAACT,OAAN,CAAvC,EAAqD,MAArD,CAAP;AACD,CAzBuB,KAA1B;AA4BA,IAAMuB,oBAAoB,aACxBC,GAAC5D,MAAK,CAAC6B,IAAP,IAAc,UAACgC,IAAD,EAAK;EAAK,oBAAMA,IAAN,EAAU,MAAV;AAAgB,CADhB,EAExBD,GAAC5D,MAAK,CAAC+B,MAAP,IAAgB,UAAC8B,IAAD,EAAK;EAAK,oBAAMA,IAAN,EAAU,MAAV;AAAgB,CAFlB,EAGxBD,GAAC5D,MAAK,CAACgC,SAAP,IAAmB,UAAC6B,IAAD,EAAK;EAAK,oBAAMA,IAAN,EAAU,MAAV;AAAgB,CAHrB,EAIxBD,GAAC5D,MAAK,CAAC8B,IAAP,IAAc,UAAC+B,IAAD,EAAK;EAAK,uBAASA,IAAT,EAAa,SAAb;AAAsB,CAJtB,EAKxBD,GAAC5D,MAAK,CAAC8D,WAAP,IAAqB,UAACD,IAAD,EAAK;EAAK,sBAAQA,IAAR,EAAY,QAAZ;AAAoB,CAL3B,EAMxBD,GAAC5D,MAAK,CAAC+D,SAAP,IAAmB,UAACF,IAAD,EAAK;EAAK,sBAAQA,IAAR,EAAY,QAAZ;AAAoB,CANzB,KAA1B;;AASA,IAAMG,aAAa,GAAG,UAACC,IAAD,EAAepB,IAAf,EAA2B;EAC/C,6BAAevD,YAAM,CAAC2E,IAAD,CAArB,EAA2B,OAA3B,EAA2BP,MAA3B,CAAmCpE,YAAM,CAACuD,IAAI,CAACV,IAAL,CAAU+B,MAAV,CAAiBC,GAAjB,CAAqBC,EAAtB,CAAzC,EAAkE,SAAlE;AAA2E,CAD7E;AAoCA;;;;;AAGA,SAAgBC,oBAAhB,CACEC,gBADF,EAEEC,OAFF,EAEgC;EAA9B;IAAAA;EAA8B;;EAE9B,IAAI,CAACD,gBAAD,IAAqB,CAACA,gBAAgB,CAAClC,OAA3C,EAAoD;IAClD,OAAO,EAAP;EACD;;EAED,OAAOoC,oBAAoB,CAACF,gBAAgB,CAAClC,OAAlB,EAA2B;IACpDqC,UAAU,wBACLnB,oBADK,GAELiB,OAAO,CAACE,UAFH,CAD0C;IAKpDC,UAAU,wBACLf,oBADK,GAELY,OAAO,CAACG,UAFH,CAL0C;IASpDC,kBAAkB,EAAEJ,OAAO,CAACI;EATwB,CAA3B,CAA3B;AAWD;;AAED,SAASH,oBAAT,CACEI,KADF,EAEExD,EAFF,EAEyD;MAArDqD,UAAU;MAAEC,UAAU;MAAEC,kBAAkB;EAE5C,OAAOC,KAAK,CACTC,GADI,CACQ,UAAChC,IAAD,EAAK;IAAK,uBAAgB,CAACA,IAAD,EAAO;MAAE4B,UAAU,YAAZ;MAAcC,UAAU,YAAxB;MAA0BC,kBAAkB;IAA5C,CAAP,CAAhB;EAAsE,CADxF,EAEJG,IAFI,CAEC,EAFD,CAAP;AAGD;;AAED,SAASC,gBAAT,CACElC,IADF,EAEEzB,EAFF,EAEyD;MAArDqD,UAAU;MAAEC,UAAU;MAAEC,kBAAkB;;EAE5C,IAAIK,MAAO,CAACjC,MAARiC,CAAenC,IAAfmC,CAAJ,EAA0B;IACxB,IAAIC,SAAS,GAAG3F,YAAM,CAACuD,IAAI,CAACR,KAAN,CAAtB,CADwB;;IAIxB,IAAIsC,kBAAJ,EAAwB;MACtBM,SAAS,GAAGA,SAAS,CAClB5B,OADS,CACD,KADC,EACM,OADN,EAETA,OAFS,CAED,QAFC,EAES,UAACjE,KAAD,EAAM;QAAK,gBAAS8F,MAAT,CAAgB9F,KAAK,CAACM,MAAtB;MAA6B,CAFjD,CAAZ;IAGD;;IAED,IAAImD,IAAI,CAACP,KAAL,CAAW5C,MAAX,GAAoB,CAAxB,EAA2B;MACzB,OAAOmD,IAAI,CAACP,KAAL,CAAW6C,MAAX,CAAkB,UAAC9C,KAAD,EAAgB+C,IAAhB,EAA0B;QACjD,IAAI,CAACV,UAAU,CAACU,IAAI,CAACnB,IAAN,CAAf,EAA4B;UAC1B,OAAO5B,KAAP;QACD;;QACD,OAAOqC,UAAU,CAACU,IAAI,CAACnB,IAAN,CAAV,CAAsB5B,KAAtB,CAAP;MACD,CALM,EAKJ4C,SALI,CAAP;IAMD;;IAED,OAAOA,SAAP;EACD,CApBD,MAoBO;IACL,IAAMI,QAAQ,GAAS,UAACT,KAAD,EAAM;MAC3B,2BAAoB,CAACA,KAAD,EAAQ;QAAEF,UAAU,YAAZ;QAAcD,UAAU,YAAxB;QAA0BE,kBAAkB;MAA5C,CAAR,CAApB;IAA2E,CAD7E;;IAEA,IAAI,CAAC9B,IAAI,CAACX,QAAN,IAAkB,CAACuC,UAAU,CAAC5B,IAAI,CAACX,QAAN,CAAjC,EAAkD;;MAEhD,OAAO,EAAP;IACD;;IACD,OAAOuC,UAAU,CAAC5B,IAAI,CAACX,QAAN,CAAV,CAA0BW,IAA1B,EAAgCwC,QAAhC,CAAP;EACD;AACF","names":["matchHtmlRegExp","escapeHtml","string","str","match","exec","escape","html","index","lastIndex","length","charCodeAt","substring","BLOCKS","exports","INLINES","MARKS","blocks_1","PARAGRAPH","HEADING_1","HEADING_2","HEADING_3","HEADING_4","HEADING_5","HEADING_6","OL_LIST","UL_LIST","HR","QUOTE","EMBEDDED_ENTRY","EMBEDDED_ASSET","EMBEDDED_RESOURCE","TABLE","TABLE_ROW","TABLE_CELL","TABLE_HEADER_CELL","_a","LIST_ITEM","__spreadArray","DOCUMENT","inlines_1","HYPERLINK","ENTRY_HYPERLINK","ASSET_HYPERLINK","marks_1","BOLD","CODE","ITALIC","UNDERLINE","EMPTY_DOCUMENT","nodeType","data","content","value","marks","hasValue","obj","keys","_i","key","isInline","node","isBlock","isText","Object","enumerable","get","__exportStar","attributeValue","replace","defaultNodeRenderers","next","href","uri","concat","defaultMarkRenderers","_b","text","SUPERSCRIPT","SUBSCRIPT","defaultInline","type","target","sys","id","documentToHtmlString","richTextDocument","options","nodeListToHtmlString","renderNode","renderMark","preserveWhitespace","nodes","map","join","nodeToHtmlString","helpers","nodeValue","repeat","reduce","mark","nextNode"],"sources":["/home/tech/work/lander_page_contentful/node_modules/node_modules/escape-html/index.js","/home/tech/work/lander_page_contentful/node_modules/@contentful/rich-text-types/src/blocks.ts","/home/tech/work/lander_page_contentful/node_modules/@contentful/rich-text-types/src/inlines.ts","/home/tech/work/lander_page_contentful/node_modules/@contentful/rich-text-types/src/marks.ts","/home/tech/work/lander_page_contentful/node_modules/@contentful/rich-text-types/src/schemaConstraints.ts","/home/tech/work/lander_page_contentful/node_modules/@contentful/rich-text-types/src/emptyDocument.ts","/home/tech/work/lander_page_contentful/node_modules/@contentful/rich-text-types/src/helpers.ts","/home/tech/work/lander_page_contentful/node_modules/@contentful/rich-text-types/src/index.ts","/home/tech/work/lander_page_contentful/node_modules/@contentful/rich-text-html-renderer/src/index.ts"],"sourcesContent":["/*!\n * escape-html\n * Copyright(c) 2012-2013 TJ Holowaychuk\n * Copyright(c) 2015 Andreas Lubbe\n * Copyright(c) 2015 Tiancheng \"Timothy\" Gu\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module variables.\n * @private\n */\n\nvar matchHtmlRegExp = /[\"'&<>]/;\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = escapeHtml;\n\n/**\n * Escape special characters in the given string of html.\n *\n * @param  {string} string The string to escape for inserting into HTML\n * @return {string}\n * @public\n */\n\nfunction escapeHtml(string) {\n  var str = '' + string;\n  var match = matchHtmlRegExp.exec(str);\n\n  if (!match) {\n    return str;\n  }\n\n  var escape;\n  var html = '';\n  var index = 0;\n  var lastIndex = 0;\n\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34: // \"\n        escape = '&quot;';\n        break;\n      case 38: // &\n        escape = '&amp;';\n        break;\n      case 39: // '\n        escape = '&#39;';\n        break;\n      case 60: // <\n        escape = '&lt;';\n        break;\n      case 62: // >\n        escape = '&gt;';\n        break;\n      default:\n        continue;\n    }\n\n    if (lastIndex !== index) {\n      html += str.substring(lastIndex, index);\n    }\n\n    lastIndex = index + 1;\n    html += escape;\n  }\n\n  return lastIndex !== index\n    ? html + str.substring(lastIndex, index)\n    : html;\n}\n","/**\n * Map of all Contentful block types. Blocks contain inline or block nodes.\n */\nexport enum BLOCKS {\n  DOCUMENT = 'document',\n  PARAGRAPH = 'paragraph',\n\n  HEADING_1 = 'heading-1',\n  HEADING_2 = 'heading-2',\n  HEADING_3 = 'heading-3',\n  HEADING_4 = 'heading-4',\n  HEADING_5 = 'heading-5',\n  HEADING_6 = 'heading-6',\n\n  OL_LIST = 'ordered-list',\n  UL_LIST = 'unordered-list',\n  LIST_ITEM = 'list-item',\n\n  HR = 'hr',\n  QUOTE = 'blockquote',\n\n  EMBEDDED_ENTRY = 'embedded-entry-block',\n  EMBEDDED_ASSET = 'embedded-asset-block',\n  EMBEDDED_RESOURCE = 'embedded-resource-block',\n\n  TABLE = 'table',\n  TABLE_ROW = 'table-row',\n  TABLE_CELL = 'table-cell',\n  TABLE_HEADER_CELL = 'table-header-cell',\n}\n","/**\n * Map of all Contentful inline types. Inline contain inline or text nodes.\n */\nexport enum INLINES {\n  HYPERLINK = 'hyperlink',\n  ENTRY_HYPERLINK = 'entry-hyperlink',\n  ASSET_HYPERLINK = 'asset-hyperlink',\n  RESOURCE_HYPERLINK = 'resource-hyperlink',\n  EMBEDDED_ENTRY = 'embedded-entry-inline',\n  EMBEDDED_RESOURCE = 'embedded-resource-inline',\n}\n","/**\n * Map of all Contentful marks.\n */\nenum MARKS {\n  BOLD = 'bold',\n  ITALIC = 'italic',\n  UNDERLINE = 'underline',\n  CODE = 'code',\n  SUPERSCRIPT = 'superscript',\n  SUBSCRIPT = 'subscript',\n}\n\nexport default MARKS;\n","import { BLOCKS } from './blocks';\nimport { INLINES } from './inlines';\nimport MARKS from './marks';\n\nexport type TopLevelBlockEnum =\n  | BLOCKS.PARAGRAPH\n  | BLOCKS.HEADING_1\n  | BLOCKS.HEADING_2\n  | BLOCKS.HEADING_3\n  | BLOCKS.HEADING_4\n  | BLOCKS.HEADING_5\n  | BLOCKS.HEADING_6\n  | BLOCKS.OL_LIST\n  | BLOCKS.UL_LIST\n  | BLOCKS.HR\n  | BLOCKS.QUOTE\n  | BLOCKS.EMBEDDED_ENTRY\n  | BLOCKS.EMBEDDED_ASSET\n  | BLOCKS.EMBEDDED_RESOURCE\n  | BLOCKS.TABLE;\n\n/**\n * Array of all top level block types.\n * Only these block types can be the direct children of the document.\n */\nexport const TOP_LEVEL_BLOCKS: TopLevelBlockEnum[] = [\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n  BLOCKS.TABLE,\n];\n\nexport type ListItemBlockEnum =\n  | BLOCKS.PARAGRAPH\n  | BLOCKS.HEADING_1\n  | BLOCKS.HEADING_2\n  | BLOCKS.HEADING_3\n  | BLOCKS.HEADING_4\n  | BLOCKS.HEADING_5\n  | BLOCKS.HEADING_6\n  | BLOCKS.OL_LIST\n  | BLOCKS.UL_LIST\n  | BLOCKS.HR\n  | BLOCKS.QUOTE\n  | BLOCKS.EMBEDDED_ENTRY\n  | BLOCKS.EMBEDDED_ASSET\n  | BLOCKS.EMBEDDED_RESOURCE;\n\n/**\n * Array of all allowed block types inside list items\n */\nexport const LIST_ITEM_BLOCKS: TopLevelBlockEnum[] = [\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n];\n\nexport const TABLE_BLOCKS = [\n  BLOCKS.TABLE,\n  BLOCKS.TABLE_ROW,\n  BLOCKS.TABLE_CELL,\n  BLOCKS.TABLE_HEADER_CELL,\n];\n\n/**\n * Array of all void block types\n */\nexport const VOID_BLOCKS = [\n  BLOCKS.HR,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n];\n\n/**\n * Dictionary of all container block types, and the set block types they accept as children.\n *\n * Note: This does not include `[BLOCKS.DOCUMENT]: TOP_LEVEL_BLOCKS`\n */\nexport const CONTAINERS = {\n  [BLOCKS.OL_LIST]: [BLOCKS.LIST_ITEM],\n  [BLOCKS.UL_LIST]: [BLOCKS.LIST_ITEM],\n  [BLOCKS.LIST_ITEM]: LIST_ITEM_BLOCKS,\n  [BLOCKS.QUOTE]: [BLOCKS.PARAGRAPH],\n  [BLOCKS.TABLE]: [BLOCKS.TABLE_ROW],\n  [BLOCKS.TABLE_ROW]: [BLOCKS.TABLE_CELL, BLOCKS.TABLE_HEADER_CELL],\n  [BLOCKS.TABLE_CELL]: [BLOCKS.PARAGRAPH],\n  [BLOCKS.TABLE_HEADER_CELL]: [BLOCKS.PARAGRAPH],\n};\n\n/**\n * Array of all heading levels\n */\nexport const HEADINGS = [\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n];\n\n/**\n * Array of all block types that may contain text and inline nodes.\n */\nexport const TEXT_CONTAINERS = [BLOCKS.PARAGRAPH, ...HEADINGS];\n\n/**\n * Node types before `tables` release.\n */\nexport const V1_NODE_TYPES = [\n  BLOCKS.DOCUMENT,\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.LIST_ITEM,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  INLINES.HYPERLINK,\n  INLINES.ENTRY_HYPERLINK,\n  INLINES.ASSET_HYPERLINK,\n  INLINES.EMBEDDED_ENTRY,\n  'text',\n];\n\n/**\n * Marks before `superscript` & `subscript` release.\n */\nexport const V1_MARKS = [MARKS.BOLD, MARKS.CODE, MARKS.ITALIC, MARKS.UNDERLINE];\n","import { Document } from './types';\nimport { BLOCKS } from './blocks';\n\n/**\n * A rich text document considered to be empty.\n * Any other document structure than this is not considered empty.\n */\nconst EMPTY_DOCUMENT: Document = {\n  nodeType: BLOCKS.DOCUMENT,\n  data: {},\n  content: [\n    {\n      nodeType: BLOCKS.PARAGRAPH,\n      data: {},\n      content: [\n        {\n          nodeType: 'text',\n          value: '',\n          marks: [],\n          data: {},\n        },\n      ],\n    },\n  ],\n};\n\nexport default EMPTY_DOCUMENT;\n","import { Node, Block, Inline, Text } from './types';\nimport { BLOCKS } from './blocks';\nimport { INLINES } from './inlines';\n\n/**\n * Tiny replacement for Object.values(object).includes(key) to\n * avoid including CoreJS polyfills\n */\nfunction hasValue(obj: Record<string, unknown>, value: unknown) {\n  for (const key of Object.keys(obj)) {\n    if (value === obj[key]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Checks if the node is an instance of Inline.\n */\nexport function isInline(node: Node): node is Inline {\n  return hasValue(INLINES, node.nodeType);\n}\n\n/**\n * Checks if the node is an instance of Block.\n */\nexport function isBlock(node: Node): node is Block {\n  return hasValue(BLOCKS, node.nodeType);\n}\n\n/**\n * Checks if the node is an instance of Text.\n */\nexport function isText(node: Node): node is Text {\n  return node.nodeType === 'text';\n}\n","export { BLOCKS } from './blocks';\nexport { INLINES } from './inlines';\nexport { default as MARKS } from './marks';\n\nexport * from './schemaConstraints';\n\nexport * from './types';\nexport * from './nodeTypes';\n\nexport { default as EMPTY_DOCUMENT } from './emptyDocument';\n\nimport * as helpers from './helpers';\nexport { helpers };\n","import escape from 'escape-html';\nimport {\n  Document,\n  Mark,\n  Text,\n  BLOCKS,\n  MARKS,\n  INLINES,\n  Block,\n  Inline,\n  helpers,\n} from '@contentful/rich-text-types';\n\nconst attributeValue = (value: string) => `\"${value.replace(/\"/g, '&quot;')}\"`;\n\nconst defaultNodeRenderers: RenderNode = {\n  [BLOCKS.PARAGRAPH]: (node, next) => `<p>${next(node.content)}</p>`,\n  [BLOCKS.HEADING_1]: (node, next) => `<h1>${next(node.content)}</h1>`,\n  [BLOCKS.HEADING_2]: (node, next) => `<h2>${next(node.content)}</h2>`,\n  [BLOCKS.HEADING_3]: (node, next) => `<h3>${next(node.content)}</h3>`,\n  [BLOCKS.HEADING_4]: (node, next) => `<h4>${next(node.content)}</h4>`,\n  [BLOCKS.HEADING_5]: (node, next) => `<h5>${next(node.content)}</h5>`,\n  [BLOCKS.HEADING_6]: (node, next) => `<h6>${next(node.content)}</h6>`,\n  [BLOCKS.EMBEDDED_ENTRY]: (node, next) => `<div>${next(node.content)}</div>`,\n  [BLOCKS.EMBEDDED_RESOURCE]: (node, next) => `<div>${next(node.content)}</div>`,\n  [BLOCKS.UL_LIST]: (node, next) => `<ul>${next(node.content)}</ul>`,\n  [BLOCKS.OL_LIST]: (node, next) => `<ol>${next(node.content)}</ol>`,\n  [BLOCKS.LIST_ITEM]: (node, next) => `<li>${next(node.content)}</li>`,\n  [BLOCKS.QUOTE]: (node, next) => `<blockquote>${next(node.content)}</blockquote>`,\n  [BLOCKS.HR]: () => '<hr/>',\n  [BLOCKS.TABLE]: (node, next) => `<table>${next(node.content)}</table>`,\n  [BLOCKS.TABLE_ROW]: (node, next) => `<tr>${next(node.content)}</tr>`,\n  [BLOCKS.TABLE_HEADER_CELL]: (node, next) => `<th>${next(node.content)}</th>`,\n  [BLOCKS.TABLE_CELL]: (node, next) => `<td>${next(node.content)}</td>`,\n  [INLINES.ASSET_HYPERLINK]: (node) => defaultInline(INLINES.ASSET_HYPERLINK, node as Inline),\n  [INLINES.ENTRY_HYPERLINK]: (node) => defaultInline(INLINES.ENTRY_HYPERLINK, node as Inline),\n  [INLINES.EMBEDDED_ENTRY]: (node) => defaultInline(INLINES.EMBEDDED_ENTRY, node as Inline),\n  [INLINES.HYPERLINK]: (node, next) => {\n    const href = typeof node.data.uri === 'string' ? node.data.uri : '';\n    return `<a href=${attributeValue(href)}>${next(node.content)}</a>`;\n  },\n};\n\nconst defaultMarkRenderers: RenderMark = {\n  [MARKS.BOLD]: (text) => `<b>${text}</b>`,\n  [MARKS.ITALIC]: (text) => `<i>${text}</i>`,\n  [MARKS.UNDERLINE]: (text) => `<u>${text}</u>`,\n  [MARKS.CODE]: (text) => `<code>${text}</code>`,\n  [MARKS.SUPERSCRIPT]: (text) => `<sup>${text}</sup>`,\n  [MARKS.SUBSCRIPT]: (text) => `<sub>${text}</sub>`,\n};\n\nconst defaultInline = (type: string, node: Inline) =>\n  `<span>type: ${escape(type)} id: ${escape(node.data.target.sys.id)}</span>`;\n\nexport type CommonNode = Text | Block | Inline;\n\nexport interface Next {\n  (nodes: CommonNode[]): string;\n}\n\nexport interface NodeRenderer {\n  (node: Block | Inline, next: Next): string;\n}\n\nexport interface RenderNode {\n  [k: string]: NodeRenderer;\n}\n\nexport interface RenderMark {\n  [k: string]: (text: string) => string;\n}\n\nexport interface Options {\n  /**\n   * Node renderers\n   */\n  renderNode?: RenderNode;\n  /**\n   * Mark renderers\n   */\n  renderMark?: RenderMark;\n  /**\n   * Keep line breaks and multiple spaces\n   */\n  preserveWhitespace?: boolean;\n}\n\n/**\n * Serialize a Contentful Rich Text `document` to an html string.\n */\nexport function documentToHtmlString(\n  richTextDocument: Document,\n  options: Partial<Options> = {},\n): string {\n  if (!richTextDocument || !richTextDocument.content) {\n    return '';\n  }\n\n  return nodeListToHtmlString(richTextDocument.content, {\n    renderNode: {\n      ...defaultNodeRenderers,\n      ...options.renderNode,\n    },\n    renderMark: {\n      ...defaultMarkRenderers,\n      ...options.renderMark,\n    },\n    preserveWhitespace: options.preserveWhitespace,\n  });\n}\n\nfunction nodeListToHtmlString(\n  nodes: CommonNode[],\n  { renderNode, renderMark, preserveWhitespace }: Options,\n): string {\n  return nodes\n    .map<string>((node) => nodeToHtmlString(node, { renderNode, renderMark, preserveWhitespace }))\n    .join('');\n}\n\nfunction nodeToHtmlString(\n  node: CommonNode,\n  { renderNode, renderMark, preserveWhitespace }: Options,\n): string {\n  if (helpers.isText(node)) {\n    let nodeValue = escape(node.value);\n\n    // If preserveWhitespace is true, handle line breaks and spaces.\n    if (preserveWhitespace) {\n      nodeValue = nodeValue\n        .replace(/\\n/g, '<br/>')\n        .replace(/ {2,}/g, (match) => '&nbsp;'.repeat(match.length));\n    }\n\n    if (node.marks.length > 0) {\n      return node.marks.reduce((value: string, mark: Mark) => {\n        if (!renderMark[mark.type]) {\n          return value;\n        }\n        return renderMark[mark.type](value);\n      }, nodeValue);\n    }\n\n    return nodeValue;\n  } else {\n    const nextNode: Next = (nodes) =>\n      nodeListToHtmlString(nodes, { renderMark, renderNode, preserveWhitespace });\n    if (!node.nodeType || !renderNode[node.nodeType]) {\n      // TODO: Figure what to return when passed an unrecognized node.\n      return '';\n    }\n    return renderNode[node.nodeType](node, nextNode);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}